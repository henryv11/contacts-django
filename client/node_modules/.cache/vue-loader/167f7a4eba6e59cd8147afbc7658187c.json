{"remainingRequest":"F:\\Projects\\smit\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\Projects\\smit\\client\\src\\views\\Contacts.vue?vue&type=script&lang=js&","dependencies":[{"path":"F:\\Projects\\smit\\client\\src\\views\\Contacts.vue","mtime":1562511670112},{"path":"F:\\Projects\\smit\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"F:\\Projects\\smit\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\Projects\\smit\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport Navbar from \"@/components/Navbar.vue\";\r\nimport Contact from \"@/components/Contact.vue\";\r\nimport NewContactForm from \"@/components/NewContactForm.vue\";\r\n\r\nexport default {\r\n  name: \"Contacts\",\r\n  components: {\r\n    Navbar,\r\n    Contact,\r\n    NewContactForm\r\n  },\r\n  data() {\r\n    return {\r\n      newUserMode: false,\r\n      pageSize: 10,\r\n      currentPage: 1,\r\n      direction: \"asc\",\r\n      orderBy: \"createdAt\",\r\n      loading: false,\r\n      contacts: [],\r\n      totalPages: 0,\r\n      totalElements: 0\r\n    };\r\n  },\r\n  methods: {\r\n    openNewUser() {\r\n      this.newUserMode = true;\r\n    },\r\n    closeNewUser() {\r\n      this.newUserMode = false;\r\n    },\r\n    toggleNewUser() {\r\n      this.newUserMode = !this.newUserMode;\r\n    },\r\n    fetchContacts() {\r\n      this.loading = true;\r\n      this.$http({\r\n        method: \"get\",\r\n        url:\r\n          this.$apiBaseUrl +\r\n          \"/api/contacts/\" +\r\n          (this.currentPage - 1) +\r\n          \"/\" +\r\n          this.pageSize +\r\n          \"/\" +\r\n          this.direction +\r\n          \"/\" +\r\n          this.orderBy,\r\n        headers: { Authorization: this.$store.getters.bearerToken }\r\n      })\r\n        .then(resp => {\r\n          this.contacts = resp.data.content;\r\n          this.totalPages = resp.data.totalPages;\r\n          this.totalElements = resp.data.totalElements;\r\n          this.loading = false;\r\n        })\r\n        .catch(err => {\r\n          this.loading = false;\r\n        });\r\n    },\r\n    addContact(contact) {\r\n      if (this.contacts.length >= this.pageSize) {\r\n        this.contacts.shift();\r\n      }\r\n      this.contacts.unshift(contact);\r\n    },\r\n    removeContact(id) {\r\n      for (var i = 0; i < this.contacts.length; i++) {\r\n        if (this.contacts[i].id == id) {\r\n          this.contacts.splice(i, 1);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    this.fetchContacts();\r\n  }\r\n};\r\n",{"version":3,"sources":["Contacts.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Contacts.vue","sourceRoot":"src/views","sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <Navbar @toggleNewUser=\"toggleNewUser\" />\r\n    <div v-if=\"loading\" class=\"mt-4 pt-4\">\r\n      <b-spinner variant=\"primary\" label=\"Spinning\"></b-spinner>\r\n    </div>\r\n    <div v-else>\r\n      <b-collapse id=\"new-user-collapse\" v-model=\"newUserMode\" class=\"mt-2 shadow-sm\">\r\n        <b-card>\r\n          <NewContactForm @addContactSuccess=\"addContact\" />\r\n        </b-card>\r\n      </b-collapse>\r\n      <b-list-group flush class=\"mt-2\">\r\n        <b-list-group-item v-for=\"contact in contacts\" :key=\"contact.id\" class=\"border-0 py-1\">\r\n          <Contact :contact=\"contact\" @deleteSuccess=\"removeContact\" />\r\n        </b-list-group-item>\r\n      </b-list-group>\r\n      <b-pagination\r\n        v-if=\"(totalElements > pageSize)\"\r\n        v-model=\"currentPage\"\r\n        class=\"mt-2\"\r\n        :total-rows=\"totalElements\"\r\n        :per-page=\"pageSize\"\r\n        align=\"center\"\r\n        size=\"sm\"\r\n        @input=\"fetchContacts\"\r\n      ></b-pagination>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Navbar from \"@/components/Navbar.vue\";\r\nimport Contact from \"@/components/Contact.vue\";\r\nimport NewContactForm from \"@/components/NewContactForm.vue\";\r\n\r\nexport default {\r\n  name: \"Contacts\",\r\n  components: {\r\n    Navbar,\r\n    Contact,\r\n    NewContactForm\r\n  },\r\n  data() {\r\n    return {\r\n      newUserMode: false,\r\n      pageSize: 10,\r\n      currentPage: 1,\r\n      direction: \"asc\",\r\n      orderBy: \"createdAt\",\r\n      loading: false,\r\n      contacts: [],\r\n      totalPages: 0,\r\n      totalElements: 0\r\n    };\r\n  },\r\n  methods: {\r\n    openNewUser() {\r\n      this.newUserMode = true;\r\n    },\r\n    closeNewUser() {\r\n      this.newUserMode = false;\r\n    },\r\n    toggleNewUser() {\r\n      this.newUserMode = !this.newUserMode;\r\n    },\r\n    fetchContacts() {\r\n      this.loading = true;\r\n      this.$http({\r\n        method: \"get\",\r\n        url:\r\n          this.$apiBaseUrl +\r\n          \"/api/contacts/\" +\r\n          (this.currentPage - 1) +\r\n          \"/\" +\r\n          this.pageSize +\r\n          \"/\" +\r\n          this.direction +\r\n          \"/\" +\r\n          this.orderBy,\r\n        headers: { Authorization: this.$store.getters.bearerToken }\r\n      })\r\n        .then(resp => {\r\n          this.contacts = resp.data.content;\r\n          this.totalPages = resp.data.totalPages;\r\n          this.totalElements = resp.data.totalElements;\r\n          this.loading = false;\r\n        })\r\n        .catch(err => {\r\n          this.loading = false;\r\n        });\r\n    },\r\n    addContact(contact) {\r\n      if (this.contacts.length >= this.pageSize) {\r\n        this.contacts.shift();\r\n      }\r\n      this.contacts.unshift(contact);\r\n    },\r\n    removeContact(id) {\r\n      for (var i = 0; i < this.contacts.length; i++) {\r\n        if (this.contacts[i].id == id) {\r\n          this.contacts.splice(i, 1);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    this.fetchContacts();\r\n  }\r\n};\r\n</script>\r\n\r\n"]}]}